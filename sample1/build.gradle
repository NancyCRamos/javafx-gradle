apply plugin: 'java'

// move into plugin
buildscript {
    final javafxHome = System.env['JFXRT_HOME']
    if (javafxHome) {
        ext.jfxrtHome = "${javafxHome}"
    } else {
        final javaHome = System.env['JAVA_HOME']
        if (javaHome)
            ext.jfxrtHome = "${javaHome}/jre/lib"
    }
    try {
        println "JavaFX runtime home dir: ${ext.jfxrtHome}"
    }
    catch (MissingPropertyException mpe) {
        println """    Please set the environment variable JFXRT_HOME
    to the directory that contains jfxrt.jar."""
        System.exit 1
    }


}


ext {
    javafx_sign = false
    javafx_appName = 'Brick Breaker'        // default is $project
    javafx_mainClass = 'brickbreaker.Main'  // default is [${group}.][${project}].Main
}

dependencies {
    compile files("$jfxrtHome/jfxrt.jar")
}

// Stuff done by the plugin
ant.taskdef(name: 'fxJar',
        classname: 'com.sun.javafx.tools.ant.FXJar',
        classpath: files("$jfxrtHome/../../lib/ant-javafx.jar").asPath)
ant.taskdef(name: 'fxSignJar',
        classname: 'com.sun.javafx.tools.ant.FXSignJarTask',
        classpath: files("$jfxrtHome/../../lib/ant-javafx.jar").asPath)
ant.taskdef(name: 'fxDeploy',
        classname: 'com.sun.javafx.tools.ant.DeployFXTask',
        classpath: files("$jfxrtHome/../../lib/ant-javafx.jar").asPath)




task 'fxJar' {
    dependsOn(jar.dependsOn)

    doLast {

//        <fx:application id="sampleApp"
//        name="Some sample app"
//        mainClass="test.MyApplication"
//        <-- This application has a preloader class -->
//                preloaderClass="testpreloader.Preloader"
//        fallbackClass="test.UseMeIfNoFX"/>


        ant.fxJar(destfile: "$libsDir/${archivesBaseName}.jar") {
            sourceSets.main.output.files.each {
                if (it.exists()) {
                    fileset(dir: it)
                }
            }
            application(
                    name: javafx_appName,
                    mainClass: javafx_mainClass
                    //FIXME preloader
                    //FIXME fallback
            )
        }
//        <manifest>
//        <attribute name="Implementation-Vendor"
//        value="${application.vendor}"/>
//        <attribute name="Implementation-Title"
//        value="${application.title}"/>
//        <attribute name="Implementation-Version" value="1.0"/>
//        </manifest>
//
//    <-- Define what files to include -->
//    <fileset dir="${build.classes.dir}"/>
//        </fx:jar>

    }
}

task 'fxSignJar' {
    dependsOn fxJar
    enabled = javafx_sign
    doLast {
            //FIXME ant.fxSignJar
//            <fx:signjar keyStore="${basedir}/sample.jks" destdir="dist"
//            alias="javafx" storePass="****" keyPass="****">
//            <fileset dir='dist/*.jar'/>
//            </fx:signjar>
    }
}

task 'fxDeploy' {
    dependsOn fxSignJar
    doLast {
        ant.fxDeploy(
            //width:
            //height:
                outDir: distsDir,
                embedJNLP: true,
                outFile:javafx_appName,
                nativeBundles:'all'
        ) {

            application(
                    id: javafx_appName,
                    name: javafx_appName,
                    mainClass: javafx_mainClass
                    //FIXME preloader
                    //FIXME fallback
            )
            resources{
                 fileset(file:"$libsDir/${archivesBaseName}.jar")
            }
            info(
                    title: javafx_appName
            )

            permissions(elevated:'true')

//            <fx:deploy width="${applet.width}" height="${applet.height}"
//            outdir="${basedir}/${dist.dir}" embedJNLP="true"
//            outfile="${application.title}">
//
//            <fx:application refId="sampleApp"/>
//
//            <fx:resources refid="appRes"/>
//
//            <fx:info title="Sample app: ${application.title}"
//            vendor="${application.vendor}"/>
//
//            <-- Request elevated permissions -->
//            <fx:permissions elevate="true"/>
//            </fx:deploy>

        }
    }
}


assemble.dependsOn(fxDeploy)

jar {
    enabled = false
}

