apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin'
apply plugin: 'idea'
apply plugin: 'maven'

// e(fx)clipse integration, not part of the Gradle JavaFX Plugin proper
// just here for integration testing
apply plugin: 'eclipse'
eclipse {
    project {
        natures 'org.eclipse.jdt.core.javanature', 'org.eclipse.xtext.ui.shared.xtextNature'
        buildCommand 'org.eclipse.jdt.core.javabuilder'
        buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    }

    classpath {
        containers 'at.bestsolution.efxclipse.tooling.jdt.core.JAVAFX_CONTAINER'
    }
}


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.jfxtras:jfxtras-labs:2.2-r4'
}

group = 'com.bitbucket.shemnon.javafxplugin.samples'
version = '0.0.0'

javafx {

    profiles {
    // not every possible platform override, but ones that have a known impact
        windows {
            id = 'c533f663-1efd-489f-b910-4c7ec20c7fd0'
            category = 'JavaFX Demos'
            javaRuntime = 'C:/Program Files (x86)/Java/jdk1.7.0_21'
        }

        macosx {
            id = 'net.java.openjdk.openjfx.Ensemble2'
            category = 'public.app-category.developer-tools'
            javaRuntime = '/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/'
        }

        linux {
            // linux doesn't care about id, it goes un-used at the moment
            category = 'Development'
            // good luck finding a standard location for the JDK
            //javaRuntime = '/usr/lib/jvm/java-7-oracle'
        }
    }

    debugKey {
        alias = 'buggyKey'
        keyPass = '123456'
        keyStore = file('veryinsecure.jks')
        storePass = '123456'
    }
    // don't get too excited, the release key is overridden by gradle.properties
    releaseKey {
        alias = 'imaginary'
        keyPass = 'bad'
        keyStore = file('nonexistant.jks')
        storePass = 'bad'
    }
    signingMode 'release'

    appID 'FullyExpressed'
    appName 'Fully Expressed Build File'
    mainClass 'org.bitbucket.shemnon.jfx.sample.fullyexpressed.TheMain'

    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    systemProperties = [ 'prism.disableRegionCaching':'true' ]
    arguments = ['1AC', '1NC', '2AC', '2NC', '1NR', '1AR', '2NR', '2AR']

    embedLauncher = true // caution: class-path not set and is overwritten if set to false

    // applet and webstart stuff
    width = 800
    height = 600
    embedJNLP = false


    // deplpy/info attributes
    category = 'demo'
    copyright = 'Copyright (c) 2012 Danno Ferrin'
    description = '''If it can and ever should be configured, it is configured in this build.
But really, you should live with the conventions when appropriate.'''
    licenseType = '3 clause BSD'
    vendor = 'Me!'

    // deploy/preferences attributes
    installSystemWide = true
    menu = true
    shortcut = true

    codebase = 'http://example.com/bogus/JNLP/Codebase'

    // app icons
    icons {
        shortcut = ['shortcut-16.png', 'shortcut-32.png', 'shortcut-128.png', 'shortcut-256.png', 'shortcut-16@2x.png', 'shortcut-32@2x.png', 'shortcut-128@2x.png']
        volume = 'javafx-icon.png'
        setup = 'javafx-icon.png'
    }

    // jnlp icons, legacy
    icon {
        href = 'src/main/resources/javafx-icon.png'
        kind = 'splash'
        width = 128
        height = 128
    }
    icon {
        href = 'shortcut-32@2x.png'
        kind = 'selected'
        width = 16
        height = 16
        scale = 1
    }
}

compileJava {
    sourceCompatibility = 7
    targetCompatibility = 7
}

jfxDeploy {
    // verbose output of the deployment, to the info chanel
    // it leaves files in the temp dir if set to true
    verbose = false
}

generateDebugKey {
    dname='ou=them'
    validity=1
}

